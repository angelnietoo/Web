package Escuela;
import java.util.ArrayList;

class Profesor {
    protected int id;
    private String nombre;
    private int añosEnseñanza;
    private double salario;
    public String materia;

    // Constructor: inicializa id, nombre, años de enseñanza, salario y materia del profesor.
    public Profesor(int id, String nombre, int añosEnseñanza, double salario, String materia) {
        this.id = id;
        this.nombre = nombre;
        this.añosEnseñanza = añosEnseñanza;
        this.salario = salario;
        this.materia = materia;
    }

    // Métodos para obtener el nombre, años de enseñanza y salario del profesor.
    public String getNombre() { return nombre; }
    public int getAñosEnseñanza() { return añosEnseñanza; }
    public double getSalario() { return salario; }
}

class Director extends Profesor {
    private double presupuestoEventos; // Presupuesto de eventos para el director.

    // Constructor: inicializa los atributos del director, añadiendo el presupuesto de eventos.
    public Director(int id, String nombre, int añosEnseñanza, double salario, String materia, double presupuestoEventos) {
        super(id, nombre, añosEnseñanza, salario, materia); // Llama al constructor de Profesor.
        this.presupuestoEventos = presupuestoEventos;
    }
}

class Escuela {
    private String nombre;
    private int alumnos;
    private ArrayList<Profesor> profesores; // Lista de profesores de la escuela.

    // Constructor: inicializa nombre, número de alumnos y la lista de profesores.
    public Escuela(String nombre, int alumnos) {
        this.nombre = nombre;
        this.alumnos = alumnos;
        this.profesores = new ArrayList<>();
    }

    // Devuelve el número de profesores en la escuela.
    public int totalProfesores() {
        return profesores.size();
    }

    // Devuelve el profesor con el salario más alto de la materia indicada.
    public Profesor mejorSalario(String materia) {
        Profesor mejorSalario = null;
        for (Profesor profesor : profesores) {
            // Si la materia coincide o no se especifica, y si el salario es el más alto
            if ((materia == null || profesor.materia.equals(materia)) && (mejorSalario == null || profesor.getSalario() > mejorSalario.getSalario())) {
                mejorSalario = profesor;
            }
        }
        return mejorSalario;
    }

    // Asciende a un profesor a director si no lo es ya.
    public boolean ascenderADirector(String nombre) {
        for (int i = 0; i < profesores.size(); i++) {
            Profesor profesor = profesores.get(i);
            // Si el nombre coincide, y el profesor no es ya director
            if (profesor.getNombre().equalsIgnoreCase(nombre)) {
                if (profesor instanceof Director) return false; // Ya es director.
                // Si no es director, lo asciende a director
                profesores.set(i, new Director(profesor.id, profesor.getNombre(), profesor.getAñosEnseñanza(), profesor.getSalario(), profesor.materia, 5000.0));
                return true;
            }
        }
        return false; // Si no se encuentra el profesor.
    }

    // Calcula los gastos totales de los profesores con menos años de enseñanza que el máximo.
    // Si el profesor es director, se añaden 2000 adicionales.
    public void calcularGastos(int maxAniosEnsenanza) {
        double total = 0;
        for (Profesor profesor : profesores) {
            // Si los años de enseñanza del profesor son menores al máximo
            if (profesor.getAñosEnseñanza() < maxAniosEnsenanza) {
                total += profesor.getSalario(); // Se añaden los gastos del salario del profesor.
                // Si el profesor es director, añadir 2000 más.
                if (profesor instanceof Director) {
                    total += 2000;
                }
            }
        }
        this.alumnos += total; // Añade los gastos totales al número de alumnos.
    }
}
