package Escuela;
import java.util.ArrayList;

class Profesor {
    protected int id;
    private String nombre;
    private int añosEnseñanza;
    private double salario;
    public String materia;

    // Constructor de la clase Profesor, asignando los valores de id, nombre, años de enseñanza, salario y materia
    public Profesor(int id, String nombre, int añosEnseñanza, double salario, String materia) {
        this.id = id;
        this.nombre = nombre;
        this.añosEnseñanza = añosEnseñanza;
        this.salario = salario;
        this.materia = materia;
    }

    // Métodos getter para obtener el nombre, años de enseñanza y salario
    public String getNombre() { return nombre; }
    public int getAñosEnseñanza() { return añosEnseñanza; }
    public double getSalario() { return salario; }
}

class Director extends Profesor {
    private double presupuestoEventos; // Presupuesto para eventos asignado al director

    // Constructor para la clase Director, que extiende de Profesor y agrega el presupuesto de eventos
    public Director(int id, String nombre, int añosEnseñanza, double salario, String materia, double presupuestoEventos) {
        super(id, nombre, añosEnseñanza, salario, materia); // Llamada al constructor de la clase Profesor
        this.presupuestoEventos = presupuestoEventos;
    }
}

class Escuela {
    private String nombre;
    private int alumnos;
    private ArrayList<Profesor> profesores;

    // Constructor para inicializar los datos de la escuela, incluyendo el nombre, número de alumnos y lista de profesores
    public Escuela(String nombre, int alumnos) {
        this.nombre = nombre;
        this.alumnos = alumnos;
        this.profesores = new ArrayList<>();
    }

    // Método que devuelve el número total de profesores en la escuela
    public int totalProfesores() {
        return profesores.size();
    }

    // Método que devuelve al profesor con el salario más alto en una materia específica
    public Profesor mejorSalario(String materia) {
        Profesor mejorSalario = null;
        for (Profesor profesor : profesores) {
            // Si no se especifica materia o la materia del profesor coincide con la buscada
            // y si el salario del profesor es el más alto encontrado
            if ((materia == null || profesor.materia.equals(materia)) && (mejorSalario == null || profesor.getSalario() > mejorSalario.getSalario())) {
                mejorSalario = profesor;
            }
        }
        return mejorSalario;
    }

    // Método que asciende a un profesor a director si el nombre coincide con el proporcionado
    // Si el profesor ya es director, no se puede ascender
    public boolean ascenderADirector(String nombre) {
        for (int i = 0; i < profesores.size(); i++) {
            Profesor profesor = profesores.get(i);
            if (profesor.getNombre().equalsIgnoreCase(nombre)) {
                if (profesor instanceof Director) return false; // Si ya es director, no se puede ascender
                // Asignar el rol de director y crear un nuevo objeto Director con un presupuesto de eventos
                profesores.set(i, new Director(profesor.id, profesor.getNombre(), profesor.getAñosEnseñanza(), profesor.getSalario(), profesor.materia, 5000.0));
                return true;
            }
        }
        return false;
    }

    // Método que calcula los gastos de los profesores con menos años de enseñanza que un valor máximo proporcionado
    // Si un profesor es director, se agregan gastos adicionales
    public void calcularGastos(int maxAniosEnsenanza) {
        double total = 0;
        for (Profesor profesor : profesores) {
            // Si el profesor tiene menos años de enseñanza que el máximo especificado
            if (profesor.getAñosEnseñanza() < maxAniosEnsenanza) {
                total += profesor.getSalario(); // Sumar el salario del profesor
                if (profesor instanceof Director) {
                    total += 2000; // Si es director, sumar 2000 adicionales
                }
            }
        }
        this.alumnos += total; // Acumular el total de gastos con los alumnos
    }
}
